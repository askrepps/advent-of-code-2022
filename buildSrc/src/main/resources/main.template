${license}

package com.askrepps.advent${advent_year}

import kotlin.system.measureTimeMillis
${runner_imports}
private val runners = listOf${runner_type}(
${runner_list}
)

fun runDay(dayNumber: Int) {
    println("Day $dayNumber")
    val elapsedTime = measureTimeMillis {
        runners.getOrNull(dayNumber - 1)?.invoke()
            ?: throw IllegalArgumentException("No runner found for day $dayNumber")
    }
    println("Elapsed time: ${elapsedTime.millisecondsToSeconds()} s\n")
}

fun Long.millisecondsToSeconds() =
    toDouble() / 1000.0

fun main(args: Array<String>) {
    val day = args.firstOrNull()
    if (day == null) {
        println("Running all ${runners.size} days\n")
        val elapsedTime = measureTimeMillis {
            for (dayNumber in 1..runners.size) {
                runDay(dayNumber)
            }
        }
        println("Total elapsed time: ${elapsedTime.millisecondsToSeconds()} s")
    } else {
        val dayNumber = day.toIntOrNull()
            ?: throw IllegalArgumentException("Day must be a valid integer")
        runDay(dayNumber)
    }
}